#!/usr/bin/env bash

TYPE=php
VERSION=3.0.0

# making harbor command available
chmod +x ./harbor

checkSystemSupport() {
  # check system if supported
  UNAMEOUT="$(uname -s)"
  case "${UNAMEOUT}" in
  Linux*)
    MACHINE=linux
    ;;
  Darwin*)
    MACHINE=mac
    ;;
  MINGW64_NT-10.0*)
    MACHINE=mingw64
    ;;
  *)
    MACHINE="UNKNOWN"
    ;;
  esac

  if [[ "$MACHINE" == "UNKNOWN" ]]; then
    echo "Unsupported system type"
    echo "System must be a Macintosh/Linux/Windows"
    echo ""
    echo "System detection determined via uname command"
    echo "If the following is empty, could not find uname command: $(which uname)"
    echo "Your reported uname is: $(uname -s)"
  fi
}

prepareExternalVolumes() {
  if [[ ! "$(docker volume ls -q | grep empty-node-modules)" ]]; then
    echo "empty-node-modules volume does not exist, will be created now."
    docker volume create --driver local empty-node-modules
  fi
    if [[ ! "$(docker volume ls -q | grep empty-vendor)" ]]; then
    echo "empty-vendor volume does not exist, will be created now."
    docker volume create --driver local empty-vendor
  fi
    if [[ ! "$(docker volume ls -q | grep composer-cache)" ]]; then
    echo "composer-cache volume does not exist, will be created now."
    docker volume create --driver local composer-cache
  fi
}

setupEnvVariables() {
  # set xdebug host for developing
  if [[ $(docker version --format '{{.Server.Version}}') > 18.03.0 ]]; then
    HARBOR_XDEBUG_HOST=host.docker.internal
  elif [[ "$MACHINE" == "linux" ]]; then
    HARBOR_XDEBUG_HOST=$(/sbin/ifconfig docker0 | grep "inet addr" | cut -d ':' -f 2 | cut -d ' ' -f 1)
  elif [[ "$MACHINE" == "mac" ]]; then
    HARBOR_XDEBUG_HOST=$(ipconfig getifaddr en0) # Ethernet

    if [[ -z "$HARBOR_XDEBUG_HOST" ]]; then
      HARBOR_XDEBUG_HOST=$(ipconfig getifaddr en1) # Wifi
    fi
  elif [[ "$MACHINE" == "mingw64" ]]; then # Git Bash
    HARBOR_XDEBUG_HOST=10.0.75.1
  fi
  export HARBOR_XDEBUG_HOST

  # set sed command
  if [[ "$MACHINE" == "linux" ]] || [[ "$MACHINE" == "mingw64" ]]; then
    SEDCMD="sed -i"
  elif [[ "$MACHINE" == "mac" ]]; then
    SEDCMD="sed -i .bak"
  fi

  # prepare default env variables
  export HARBOR_WEB_PORT=${HARBOR_WEB_PORT:-80}
  export HARBOR_DB_PORT=${HARBOR_DB_PORT:-5432}
  export HARBOR_DB_TESTING_PORT=${HARBOR_DB_TESTING_PORT:-5433}
  export HARBOR_DB_CONNECTION=${HARBOR_DB_CONNECTION:-pgsql}
  export HARBOR_DB_HOST=${HARBOR_DB_HOST:-db}

  export HARBOR_REDIS_HOST=${HARBOR_REDIS_HOST:-redis}

  export HARBOR_CACHE_DRIVER=${HARBOR_CACHE_DRIVER:-redis}
  export HARBOR_SESSION_DRIVER=${HARBOR_SESSION_DRIVER:-redis}

  export HARBOR_PHP_VERSION=${HARBOR_PHP_VERSION:-7.4}
  export HARBOR_POSTGRES_VERSION=${HARBOR_POSTGRES_VERSION:-12}
  export HARBOR_NODE_VERSION=${HARBOR_NODE_VERSION:-12}

  export HARBOR_NGINX_CONTAINER_VERSION=${HARBOR_NGINX_CONTAINER_VERSION:-1}
  export HARBOR_PHP_CONTAINER_VERSION=${HARBOR_PHP_CONTAINER_VERSION:-1}
  export HARBOR_POSTGRES_CONTAINER_VERSION=${HARBOR_POSTGRES_CONTAINER_VERSION:-1}
  export HARBOR_NODE_CONTAINER_VERSION=${HARBOR_NODE_CONTAINER_VERSION:-1}

  export HARBOR_SSH_PATH=${HARBOR_SSH_PATH:-./docker/php/ssh}
  export HARBOR_TERMINAL_EMULATOR=${HARBOR_TERMINAL_EMULATOR:-JetBrains-JediTerm}

  export HARBOR_USER_UID=${HARBOR_USER_UID:-$UID}
  export HARBOR_USER_GID=${HARBOR_USER_GID:-$GID}

  export XDEBUG_SWITCH=${XDEBUG_SWITCH:-off}

  export DB_DATABASE=${DB_DATABASE:-laravel}
  export DB_USERNAME=${DB_USERNAME:-root}
  export DB_PASSWORD=${DB_PASSWORD:-bestsecret}

  # is the environment running
  PSRESULT="$(docker-compose ps -q)"
  if [[ ! -z "$PSRESULT" ]]; then
    EXEC="yes"
  else
    EXEC="no"
  fi

  # create base docker-compose command to run
  COMPOSE="docker-compose -f docker-compose.yml -f docker-compose.override.yml"
}

testRunningContainers() {
  if [[ ! -z $(docker ps -q) ]]; then
    echo "You have some running containers. Are you sure that they are not blocking required ports: $HARBOR_WEB_PORT, $HARBOR_DB_PORT, $HARBOR_DB_TESTING_PORT ?"
    echo "Do you wish to continue (y/n)?"
    old_stty_cfg=$(stty -g)
    stty raw -echo
    answer=$(head -c 1)
    stty ${old_stty_cfg} # Careful playing with stty
    if echo "$answer" | grep -iq "^y"; then
      echo "Continue ..."
      ${COMPOSE} down
    else
      exit 0
    fi
  fi
}

modifyEnv() {
  if [[ -f .env ]]; then

    # source actual env values
    source .env

    if [[ ${DB_PASSWORD} == "" ]]; then
      export DB_PASSWORD="bestsecret"
    fi

    # modify values
    ${SEDCMD} "s/APP_URL=.*/APP_URL=http:\/\/localhost:${HARBOR_WEB_PORT}/" .env

    ${SEDCMD} "s/DB_CONNECTION=.*/DB_CONNECTION=${HARBOR_DB_CONNECTION}/" .env
    ${SEDCMD} "s/DB_HOST=.*/DB_HOST=${HARBOR_DB_HOST}/" .env
    ${SEDCMD} "s/DB_PORT=.*/DB_PORT=${HARBOR_DB_PORT}/" .env

    ${SEDCMD} "s/DB_DATABASE=.*/DB_DATABASE=${DB_DATABASE}/" .env
    ${SEDCMD} "s/DB_USERNAME=.*/DB_USERNAME=${DB_USERNAME}/" .env
    ${SEDCMD} "s/DB_PASSWORD=.*/DB_PASSWORD=${DB_PASSWORD}/" .env

    ${SEDCMD} "s/CACHE_DRIVER=.*/CACHE_DRIVER=${HARBOR_CACHE_DRIVER}/" .env
    ${SEDCMD} "s/SESSION_DRIVER=.*/SESSION_DRIVER=${HARBOR_SESSION_DRIVER}/" .env
    ${SEDCMD} "s/REDIS_HOST=.*/REDIS_HOST=${HARBOR_REDIS_HOST}/" .env

    # removed bak file
    if [[ -f .env.bak ]]; then
      rm .env.bak
    fi
  fi
}

setHarborInEnv() {
  if [[ ! ".env" == "$1" ]] && [[ ! ".env.example" == "$1" ]]; then
    return
  fi

  # source actual env values
  if [[ ".env" == "$1" ]]; then
    source .env
  fi

  echo "Adding values to $1 ..."
  # add or modify values in .env/.env.example
  if grep -Fq "#harbor-config" $1; then
    echo "Harbor config block already in $1"
  else
    echo -e "" >>$1
    echo -e "#harbor-config" >>$1
  fi

  if grep -Fq "HARBOR_WEB_PORT" $1; then
    echo "Harbor config HARBOR_WEB_PORT already in $1"
  else
    echo -e "HARBOR_WEB_PORT=${HARBOR_WEB_PORT}" >>$1
  fi

  if grep -Fq "HARBOR_DB_PORT" $1; then
    echo "Harbor config HARBOR_DB_PORT already in $1"
  else
    echo -e "HARBOR_DB_PORT=${HARBOR_DB_PORT}" >>$1
  fi

  if grep -Fq "HARBOR_DB_TESTING_PORT" $1; then
    echo "Harbor config HARBOR_DB_TESTING_PORT already in $1"
  else
    echo -e "HARBOR_DB_TESTING_PORT=${HARBOR_DB_TESTING_PORT}" >>$1
  fi

  if grep -Fq "HARBOR_DB_CONNECTION" $1; then
    echo "Harbor config HARBOR_DB_CONNECTION already in $1"
  else
    echo -e "HARBOR_DB_CONNECTION=${HARBOR_DB_CONNECTION}" >>$1
  fi

  if grep -Fq "HARBOR_PHP_VERSION" $1; then
    echo "Harbor config HARBOR_PHP_VERSION already in $1"
  else
    echo -e "HARBOR_PHP_VERSION=${HARBOR_PHP_VERSION}" >>$1
  fi

  if grep -Fq "HARBOR_POSTGRES_VERSION" $1; then
    echo "Harbor config HARBOR_POSTGRES_VERSION already in $1"
  else
    echo -e "HARBOR_POSTGRES_VERSION=${HARBOR_POSTGRES_VERSION}" >>$1
  fi

  if grep -Fq "HARBOR_NODE_VERSION" $1; then
    echo "Harbor config HARBOR_NODE_VERSION already in $1"
  else
    echo -e "HARBOR_NODE_VERSION=${HARBOR_NODE_VERSION}" >>$1
  fi

  if grep -Fq "HARBOR_SSH_PATH" $1; then
    echo "Harbor config HARBOR_SSH_PATH already in $1"
  else
    echo -e "HARBOR_SSH_PATH=${HARBOR_SSH_PATH}" >>$1
  fi

  if grep -Fq "XDEBUG_SWITCH" $1; then
    echo "Harbor config XDEBUG_SWITCH already in $1"
  else
    echo -e "XDEBUG_SWITCH=${XDEBUG_SWITCH}" >>$1
  fi

  # removed bak file
  if [[ -f "$1.bak" ]]; then
    rm "$1.bak"
  fi
}

rebuild() {
  REMOVE_IMAGES=""
  REMOVE_VOLUMES=""
  for i in "$@"; do
    case ${i} in
    -i | --images)
      REMOVE_IMAGES="--rmi all"
      ;;

    -v | --volumes)
      REMOVE_VOLUMES="-v"
      ;;

    *) ;;

    esac
  done
  ./harbor start
  ${COMPOSE} down ${REMOVE_VOLUMES} ${REMOVE_IMAGES}
  ${COMPOSE} pull
  ${COMPOSE} build
}

artisan() {
  if [[ "$EXEC" == "yes" ]]; then
    ${COMPOSE} exec \
      -u harbor \
      php \
      php artisan "$@"
  else
    ${COMPOSE} run --rm \
      php \
      php artisan "$@"
  fi
}

composer() {
  if [[ "$EXEC" == "yes" ]]; then
    ${COMPOSE} exec \
      -u harbor \
      php \
      composer "$@"
  else
    ${COMPOSE} run --rm \
      php \
      composer "$@"
  fi
}

db() {
  if [[ ${HARBOR_DB_CONNECTION} == "pgsql" ]]; then
    DB_COMMAND="psql -U ${DB_USERNAME} -h localhost ${DB_DATABASE}"
  elif [[ ${HARBOR_DB_CONNECTION} == "mysql" ]]; then
    DB_COMMAND="mysql -u ${DB_USERNAME} -h localhost ${DB_DATABASE}"
  else
    echo "Database ${HARBOR_DB_CONNECTION} not supported in this command."
  fi
  if [[ "$EXEC" == "yes" ]]; then
    ${COMPOSE} exec \
      -u harbor \
      db \
      ${DB_COMMAND} "$@"
  else
    ${COMPOSE} run --rm \
      db \
      ${DB_COMMAND} "$@"
  fi
}

dump() {
  if [[ ${HARBOR_DB_CONNECTION} == "pgsql" ]]; then
    DB_COMMAND="pg_dump -U ${DB_USERNAME} -h localhost ${DB_DATABASE}"
  elif [[ ${HARBOR_DB_CONNECTION} == "mysql" ]]; then
    DB_COMMAND="mysqldump -u ${DB_USERNAME} -h localhost ${DB_DATABASE}"
  else
    echo "Database ${HARBOR_DB_CONNECTION} not supported in this command."
  fi
  if [[ "$EXEC" == "yes" ]]; then
    ${COMPOSE} exec \
      -u harbor \
      db \
      ${DB_COMMAND} "$@"
  else
    ${COMPOSE} run --rm \
      db \
      ${DB_COMMAND} "$@"
  fi
}

ssh() {
  if [[ "$EXEC" == "yes" ]] && [[ "$1" != "node" ]]; then
    if [[ "$1" == "php" ]] && [[ "$2" != "root" ]]; then
      USER_ARGUMENT="-u harbor"
    else
      USER_ARGUMENT=""
    fi
    ${COMPOSE} exec \
      ${USER_ARGUMENT} \
      $1 \
      bash
  else
    ${COMPOSE} run --rm \
      $1 \
      bash
  fi
}

initCheckAndPrepareEnv() {
  echo "Checking .env and folders ..."

  testRunningContainers

  if [[ ! -f .env.example ]]; then
    echo "No .env.example file found within current working directory $(pwd), this is not a laravel project, so please run harbor install"
    exit 0
  fi

  # cp .env.example .env if .env is missing
  if [[ ! -f .env ]] && [[ -f .env.example ]]; then
    cp .env.example .env
  fi

  # make dir for node_modules, before docker-compose does
  mkdir -p ./node_modules
}

initNpm() {
  echo "Npm ..."
  # npm install
  ./harbor npm install

  # npm run dev
  ./harbor npm run dev
}

initPrepareEnv() {
  # setting harbor in .env and .env.example
  echo "Setting harbor in .env and .env.example..."
  setHarborInEnv .env.example
  setHarborInEnv .env

  echo "Changing .env ..."
  # change values in .env file
  modifyEnv

  # source actual env values
  source .env
}

initPrepareRedis() {
  echo "Adding predis/predis ..."
  # composer require predis and install - in a composer container
  # TODO somehow get response if finished ok  - (exit \$?) not working
  ${COMPOSE} run --rm php bash -c "composer require predis/predis && composer install"
}

initPrepareContainers() {
  # need to start first, because it takes time to setup database
  echo "Starting db ..."
  ${COMPOSE} run --rm db wait-for-active-database.sh

  echo "Restarting containers ..."
  # restart docker containers
  ./harbor restart
}

init() {
  echo "Setting up your docker environment for this laravel based project."

  initPrepareEnv

  initPrepareRedis

  # art key:generate
  if [[ -z "${APP_KEY}" ]] || [[ ${APP_KEY} == "SomeRandomString" ]]; then
    ${COMPOSE} run --rm php php artisan key:generate
    # source actual env values
    source .env
  fi

  initPrepareContainers

  echo "Migrating ..."
  # migrate and seed
  ./harbor art migrate --seed

  initNpm

  # stop docker containers
  ./harbor stop

  echo "All set."
}

laravel() {
  echo "Installing new laravel application to current folder."

  # remove all containers and volumes
  ${COMPOSE} down -v

  testRunningContainers

  # make dir for node_modules, before docker-compose does
  mkdir -p ./node_modules

  # laravel new
  ${COMPOSE} run --rm php laravel new ./application

  # move application content to this folder
  mv application/* application/.[!.]* .
  rm -rf ./application

  echo "Laravel installed, initializing ..."

  init
}

craftable() {
  echo "Installing new craftable application to current folder."

  # remove all containers and volumes
  ${COMPOSE} down -v

  testRunningContainers

  # make dir for node_modules, before docker-compose does
  mkdir -p ./node_modules

  # craftable new
  # use php container to create craftable new without install
  if [[ "$3" == "--dev" ]]; then
    ${COMPOSE} run --rm php craftable new --dev --no-install ./application
  else
    ${COMPOSE} run --rm php craftable new --no-install ./application
  fi

  # move application content to this folder
  mv application/* application/.[!.]* .
  rm -rf ./application

  echo "Craftable installed, initializing ..."

  initPrepareEnv

  initPrepareRedis

  initPrepareContainers

  echo "Installing craftable ..."
  # install craftable
  ./harbor art craftable:install

  initNpm

  # stop docker containers
  ./harbor stop

  echo "All set."
}

main() {
  checkSystemSupport "$@"
  setupEnvVariables "$@"

  # Source .env, which can over-ride env vars
  if [[ -f .env ]]; then
    source .env
  fi

  prepareExternalVolumes

  # If we pass any arguments...
  if [[ $# -gt 0 ]]; then

    case "$1" in
    #
    # Docker commands
    #

    # Start up containers
    start)
      shift 1
      ${COMPOSE} up -d "$@"
      ;;

    # Start up containers not as daemon
    up)
      shift 1
      ${COMPOSE} up "$@"
      ;;

    # Stop the containers
    stop)
      shift 1
      ${COMPOSE} down "$@"
      ;;

    # Restart the containers
    restart)
      if [[ "$EXEC" == "yes" ]]; then
        ./harbor stop
      fi
      ./harbor start
      ;;

    # Rebuild the containers
    rebuild)
      shift 1
      rebuild "$@"
      ;;

    #
    # PHP container commands
    #

    # If "artisan" or "art" is used, pass to "artisan" inside a container
    artisan | art)
      shift 1
      artisan "$@"
      ;;

    # If "composer" or "comp" is used, pass to "composer" inside a container
    composer | comp)
      shift 1
      composer "$@"
      ;;

    # If "test" is used, run unit tests, pass any extra arguments to phpunit
    test)
      shift 1
      export APP_ENV="testing"
      ${COMPOSE} run --rm \
        php \
        ./vendor/bin/phpunit "$@"
      ;;

    #
    # NPM container commands
    #

    # If "npm" is used, run npm from our node container
    npm)
      shift 1
      ${COMPOSE} run --rm \
        node \
        npm "$@"
      ;;

    #
    # DB container commands
    #

    # If "db" is used, run psql/mysql from our existing db container
    db)
      shift 1
      db "$@"
      ;;

    # If "pg_dump" is used, run pg_dump from our existing pgsql container
    dump)
      shift 1
      dump "$@"
      ;;

    #
    # Global commands
    #

    # If "ssh" is used, connect to given container with bash
    ssh)
      shift 1
      ssh "$@"
      ;;

    # Sent exec command to docker-compose
    exec)
      shift 1
      ${COMPOSE} exec "$@"
      ;;

    # Sent run command to docker-compose
    run)
      shift 1
      ${COMPOSE} run "$@"
      ;;

    #
    # Init and installation commands
    #

    # Initialize harbor for existing project
    init)
      initCheckAndPrepareEnv
      init
      ;;

    # Installing new laravel or craftable project
    create-project | new)
      case "$2" in

      # Installing new laravel project
      laravel)
        laravel
        ;;

      # Installing new craftable project
      craftable)
        craftable "$@"
        ;;

      # If not provided, show what to use
      *)
        echo $"Usage: $0 $1 {laravel|craftable}"
        exit 1
        ;;
      esac
      ;;

    #
    # Type and version
    #

    # Get version
    -v | --version)
      echo ${VERSION}
      ;;

    # Get type
    -t | --type)
      echo ${TYPE}
      ;;

    # Else, pass args to docker-compose
    *)
      ${COMPOSE} "$@"
      ;;

    esac
  else
    # Use the docker-compose ps command if nothing else passed through
    ${COMPOSE} ps
  fi
}

main "$@"
