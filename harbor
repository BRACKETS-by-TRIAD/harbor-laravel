#!/usr/bin/env bash

# check system if supported
UNAMEOUT="$(uname -s)"
case "${UNAMEOUT}" in
    Linux*)     MACHINE=linux;;
    Darwin*)    MACHINE=mac;;
    *)          MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported system type"
    echo "System must be a Macintosh or Linux"
    echo ""
    echo "System detection determined via uname command"
    echo "If the following is empty, could not find uname command: $(which uname)"
    echo "Your reported uname is: $(uname -s)"
fi

# set xdebug host for developing
if [ "$MACHINE" == "linux" ]; then
    export XDEBUG_HOST=$(/sbin/ifconfig docker0 | grep "inet addr" | cut -d ':' -f 2 | cut -d ' ' -f 1)
    SEDCMD="sed -i"
elif [ "$MACHINE" == "mac" ]; then
    export XDEBUG_HOST=$(ipconfig getifaddr en0) # Ethernet

    if [ -z "$XDEBUG_HOST" ]; then
        export XDEBUG_HOST=$(ipconfig getifaddr en1) # Wifi
    fi

    SEDCMD="sed -i .bak"
fi

# making harbor command available
chmod +x ./harbor

# prepare default env variables
export DOCKER_APP_PORT=${DOCKER_APP_PORT:-80}
export DOCKER_PGSQL_PORT=${DOCKER_PGSQL_PORT:-5432}
export DOCKER_PGSQL_TEST_PORT=${DOCKER_PGSQL_TEST_PORT:-5433}
export DOCKER_PGSQL_TEST_DIR=${DOCKER_PGSQL_TEST_DIR:-./docker/testing/db}
export DOCKER_PHP_VERSION=${DOCKER_PHP_VERSION:-7.2}

export DB_DATABASE=${DB_DATABASE:-homestead}
export DB_USERNAME=${DB_USERNAME:-homestead}
export DB_PASSWORD=${DB_PASSWORD:-secret}
export PGPASSWORD=${DB_PASSWORD}

# is the environment running
PSRESULT="$(docker-compose ps -q)"
if [ ! -z "$PSRESULT" ]; then
    EXEC="yes"
else
    EXEC="no"
fi

# create base docker-compose command to run
COMPOSE="docker-compose -f docker-compose.yml"

# create base php docker command to run
if [[ "$(docker images -q brackets/php:${DOCKER_PHP_VERSION} 2> /dev/null)" == "" ]]; then
  docker build ./docker/php/${DOCKER_PHP_VERSION:-7.2}/Dockerfile
fi
DOCKER_PHP="docker run --rm -it -v "$(pwd)":/var/www/html -v "$(pwd)/docker/php/ssh":/root/.ssh brackets/php:${DOCKER_PHP_VERSION}"

# main script
# If we pass any arguments...
if [ $# -gt 0 ]; then

    # Source .env, which can over-ride env vars
    if [ -f .env ]; then
        source .env
    fi

    case "$1" in

        # Start up containers
        start)
            # creating dir for testing database if not exists already
            if [ ! -d ${DOCKER_PGSQL_TEST_DIR} ]; then
                mkdir -p ${DOCKER_PGSQL_TEST_DIR}
            fi
            $COMPOSE up -d
            ;;

        # Stop the containers
        stop)
            $COMPOSE down
            ;;

        # Restart the containers
        restart)
            if [ "$EXEC" == "yes" ]; then
                ./harbor stop
            fi
            ./harbor start
            ;;

        # Rebuild the containers
        rebuild)
            if [ "$EXEC" == "yes" ]; then
                shift 1
                DOWN_PARAMS=""
                for i in "$@"
                do
                    case $i in
                        -d=*|--database)
                            DATABASE=true
                            ;;
                        -i=*|--images)
                            DOWN_PARAMS="--rmi all"
                        ;;
                        *)
                        ;;
                    esac
                done
                $COMPOSE down -v $DOWN_PARAMS
                if [ "$DATABASE" == "true" ]; then
                    rm -rf ${DOCKER_PGSQL_TEST_DIR}/*
                fi
            fi
            $COMPOSE build
            ;;

        # If "artisan" or "art" is used, pass to "artisan" inside a container
        artisan|art)
            shift 1
            if [ "$EXEC" == "yes" ]; then
                $COMPOSE exec \
                    php \
                    php artisan "$@"
            else
                $COMPOSE run --rm \
                    php \
                    php artisan "$@"
            fi
            ;;

        # If "composer" or "comp" is used, pass to "composer" inside a container
        composer|comp)
            shift 1
            if [ "$EXEC" == "yes" ]; then
                $COMPOSE exec \
                    php \
                    composer "$@"
            else
                $COMPOSE run --rm \
                    php \
                    composer "$@"
            fi
            ;;

        # If "test" is used, run unit tests, pass any extra arguments to phpunit
        test)
            shift 1
            export APP_ENV="testing"
            $COMPOSE run --rm \
                php \
                ./vendor/bin/phpunit "$@"
            ;;

        # If "npm" is used, run npm from our node container
        npm)
            shift 1
            $COMPOSE run --rm \
                node \
                npm "$@"
            ;;

        # If "yarn" is used, run yarn from our node container
        yarn)
            shift 1
            $COMPOSE run --rm \
                node \
                yarn "$@"
            ;;

        # If "gulp" is used, run gulp from our node container
        gulp)
            shift 1
            $COMPOSE run --rm \
                node \
                ./node_modules/.bin/gulp "$@"
            ;;

        # If "psql" is used, run psql from our existing pgsql container
        psql)
            shift 1
            if [ "$EXEC" == "yes" ]; then
                $COMPOSE exec \
                    pgsql \
                    psql -U $DB_USERNAME -h localhost $DB_DATABASE "$@"
            fi
            ;;

        # If "pg_dump" is used, run pg_dump from our existing pgsql container
        pg_dump)
            shift 1
            if [ "$EXEC" == "yes" ]; then
                $COMPOSE exec \
                    pgsql \
                    pg_dump -U $DB_USERNAME -h localhost $DB_DATABASE "$@"
            fi
            ;;

        # Initialize harbor for existing project
        init)
            echo "This command will setup your docker environment for this laravel based project"

            if [ ! -f .env.example ]; then
                echo "No .env.example file found within current working directory $(pwd), this is not a laravel project, so please run harbor install"
                exit 0
            fi

            # cp .env.example .env if .env is missing
            if [ ! -f .env ] && [ -f .env.example ]; then
                cp .env.example .env
            fi

            # change values in .env file
            if [ -f .env ]; then
                # source actual env values
                source .env

                # make backup of .env and add it to .gitignore file
                cp .env .env.bckp
                if [ -f .gitignore ] && [grep -q ".env.bckp" "./.gitignore"]; then
                    echo -e ".env.bckp\n" >> .gitignore
                fi

                # modify values
                $SEDCMD "s/APP_URL=.*/APP_URL=http:\/\/localhost:"$DOCKER_APP_PORT"/" .env

                $SEDCMD "s/DB_CONNECTION=.*/DB_CONNECTION=pgsql/" .env
                $SEDCMD "s/DB_HOST=.*/DB_HOST=pgsql/" .env
                $SEDCMD "s/DB_PORT=.*/DB_PORT=5432/" .env

                $SEDCMD "s/CACHE_DRIVER=.*/CACHE_DRIVER=redis/" .env
                $SEDCMD "s/SESSION_DRIVER=.*/SESSION_DRIVER=redis/" .env
                $SEDCMD "s/REDIS_HOST=.*/REDIS_HOST=redis/" .env

                # removed bak file
                if [ -f .env.bak ]; then
                    rm .env.bak
                fi
            fi

            # composer require predis and install - in a composer container
            # TODO need to be tested, not working yet (exit \$?)
            $DOCKER_PHP composer require predis/predis
            $DOCKER_PHP composer install

            # source actual env values
            source .env

            # art key:generate
            if [[ -z "${APP_KEY}" ]]; then
                $DOCKER_PHP php artisan key:generate
                # source actual env values
                source .env
            fi

            # restart docker containers
            ./harbor restart

            # migrate and seed
            ./harbor art migrate --seed

            # npm install
            ./harbor npm install

            # npm run dev
            ./harbor npm run dev

            # stop docker containers
            ./harbor stop
            ;;

        # Installing new laravel or craftable project
        new)
            case "$2" in

                # Installing new laravel project
                laravel)
                    echo "This command will install new laravel application to current folder"

                    # laravel new
                    $COMPOSE run --rm \
                        php \
                        laravel new ./application
#                    $DOCKER_PHP laravel new ./application

                    # move application content to this folder
                    mv application/* application/.[!.]* .
                    rm -rf ./application

                    ./harbor init
                    ;;

                # Installing new craftable project
                craftable)
                    echo "This command will install new craftable application to current folder"

                    # craftable new
                    # use php container to create craftable new without install
                    if [ "$3" == "--dev" ]; then
                        $DOCKER_PHP craftable new --dev --no-install ./application
                    else
                        $DOCKER_PHP craftable new --no-install ./application
                    fi

                    # move application content to this folder
                    mv application/* application/.[!.]* .
                    rm -rf ./application

                    # .env modify values
                    if [ -f .env ]; then
                        # source actual env values
                        source .env

                        # make backup of .env and add it to .gitignore file
                        cp .env .env.bckp
                        if [ -f .gitignore ] && [grep -q ".env.bckp" "./.gitignore"]; then
                            echo -e ".env.bckp\n" >> .gitignore
                        fi

                        # add or modify values in .env.example
                        if [grep -q "#docker-config" ".env.example"]; then
                            # modify values
                            $SEDCMD "s/DOCKER_APP_PORT=.*/DOCKER_APP_PORT="$DOCKER_APP_PORT"/" .env.example
                            $SEDCMD "s/DOCKER_PGSQL_PORT=.*/DOCKER_PGSQL_PORT="$DOCKER_PGSQL_PORT"/" .env.example
                            $SEDCMD "s/DOCKER_PGSQL_TEST_PORT=.*/DOCKER_PGSQL_TEST_PORT="$DOCKER_PGSQL_TEST_PORT"/" .env.example
                            $SEDCMD "s/DOCKER_PGSQL_TEST_DIR=.*/DOCKER_PGSQL_TEST_DIR="$DOCKER_PGSQL_TEST_DIR"/" .env.example
                            $SEDCMD "s/DOCKER_PHP_VERSION=.*/DOCKER_PHP_VERSION="$DOCKER_PHP_VERSION"/" .env.example
                        else
                            # add values
                            echo -e "#docker-config" >> .env.example
                            echo -e "DOCKER_APP_PORT="$DOCKER_APP_PORT"" >> .env.example
                            echo -e "DOCKER_PGSQL_PORT="$DOCKER_PGSQL_PORT"" >> .env.example
                            echo -e "DOCKER_PGSQL_TEST_PORT="$DOCKER_PGSQL_TEST_PORT"" >> .env.example
                            echo -e "DOCKER_PGSQL_TEST_DIR="$DOCKER_PGSQL_TEST_DIR"" >> .env.example
                            echo -e "DOCKER_PHP_VERSION="$DOCKER_PHP_VERSION"" >> .env.example
                        fi

                        # add or modify values in .env
                        if [grep -q "#docker-config" ".env"]; then
                            # modify values
                            $SEDCMD "s/DOCKER_APP_PORT=.*/DOCKER_APP_PORT="$DOCKER_APP_PORT"/" .env
                            $SEDCMD "s/DOCKER_PGSQL_PORT=.*/DOCKER_PGSQL_PORT="$DOCKER_PGSQL_PORT"/" .env
                            $SEDCMD "s/DOCKER_PGSQL_TEST_PORT=.*/DOCKER_PGSQL_TEST_PORT="$DOCKER_PGSQL_TEST_PORT"/" .env
                            $SEDCMD "s/DOCKER_PGSQL_TEST_DIR=.*/DOCKER_PGSQL_TEST_DIR="$DOCKER_PGSQL_TEST_DIR"/" .env
                            $SEDCMD "s/DOCKER_PHP_VERSION=.*/DOCKER_PHP_VERSION="$DOCKER_PHP_VERSION"/" .env
                        else
                            # add values
                            echo -e "#docker-config" >> .env
                            echo -e "DOCKER_APP_PORT="$DOCKER_APP_PORT"" >> .env
                            echo -e "DOCKER_PGSQL_PORT="$DOCKER_PGSQL_PORT"" >> .env
                            echo -e "DOCKER_PGSQL_TEST_PORT="$DOCKER_PGSQL_TEST_PORT"" >> .env
                            echo -e "DOCKER_PGSQL_TEST_DIR="$DOCKER_PGSQL_TEST_DIR"" >> .env
                            echo -e "DOCKER_PHP_VERSION="$DOCKER_PHP_VERSION"" >> .env
                        fi

                        # source actual env values
                        source .env

                        # modify values
                        $SEDCMD "s/DB_DATABASE=.*/DB_DATABASE=homestead/" .env
                        $SEDCMD "s/DB_USERNAME=.*/DB_USERNAME=homestead/" .env
                        $SEDCMD "s/DB_PASSWORD=.*/DB_PASSWORD=secret/" .env

                        $SEDCMD "s/APP_URL=.*/APP_URL=http:\/\/localhost:"$DOCKER_APP_PORT"/" .env

                        $SEDCMD "s/DB_CONNECTION=.*/DB_CONNECTION=pgsql/" .env
                        $SEDCMD "s/DB_HOST=.*/DB_HOST=pgsql/" .env
                        $SEDCMD "s/DB_PORT=.*/DB_PORT=5432/" .env

                        $SEDCMD "s/CACHE_DRIVER=.*/CACHE_DRIVER=redis/" .env
                        $SEDCMD "s/SESSION_DRIVER=.*/SESSION_DRIVER=redis/" .env
                        $SEDCMD "s/REDIS_HOST=.*/REDIS_HOST=redis/" .env

                        # removed bak file
                        if [ -f .env.bak ]; then
                            rm .env.bak
                        fi
                    fi

                    # composer require predis and install - in a composer container
                    # TODO need to be tested, not working yet (exit \$?)
                    $DOCKER_PHP composer require predis/predis
                    $DOCKER_PHP composer install

                    # source actual env values
                    source .env

                    # restart docker containers
                    ./harbor restart

                    # install craftable
                    ./harbor art craftable:install

                    # npm install
                    ./harbor npm install

                    # npm run dev
                    ./harbor npm run dev

                    # stop docker containers
                    ./harbor stop
                    ;;

                # If not provided, show what to use
                *)
                    echo $"Usage: $0 $1 {laravel|craftable}"
                    exit 1
                    ;;
            esac
            ;;

        # Else, pass args to docker-compose
        *)
            $COMPOSE "$@"
            ;;

    esac
else
    # Use the docker-compose ps command if nothing else passed through
    $COMPOSE ps
fi
